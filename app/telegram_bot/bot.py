import asyncio
import logging
import os

from aiogram import F
from aiogram.filters import CommandObject
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

from app.celery_tasks.tasks import sync_all_bonds_task, sync_bond_task
from app.t_investicii.portfolio import get_portfolio_info

logging.basicConfig(level=logging.INFO)

# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


class BondSync(StatesGroup):
    waiting_for_isin = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø BondWatch Bot.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/sync_all ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏\n"
        "/bond ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–æ–Ω–¥\n"
        "/portfolio ‚Äî  –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –≤ –¢-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö"
    )


@dp.message(Command("sync_all"))
async def cmd_sync_all(message: types.Message):
    sync_all_bonds_task.delay()
    await message.answer("üîÑ –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π!")


@dp.message(Command("bond"))
async def cmd_sync_bond(message: types.Message, state: FSMContext):
    await message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ ISIN –æ–±–ª–∏–≥–∞—Ü–∏–∏:")
    await state.set_state(BondSync.waiting_for_isin)


@dp.message(BondSync.waiting_for_isin)
async def process_isin(message: types.Message, state: FSMContext):
    isin = message.text.strip()
    sync_bond_task.delay(isin)
    await message.answer(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è {isin}")
    await state.clear()


@dp.message(Command("portfolio"))
async def cmd_portfolio(message: types.Message):
    try:
        portfolio = get_portfolio_info()
        if not portfolio:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤.")
            return

        text = "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n"
        for acc in portfolio:
            text += f"üìå –°—á–µ—Ç: {acc['account_name']} ({acc['account_id']})\n"
            for pos in acc['positions']:
                text += f"‚Äî {pos['figi']}: {pos['quantity']} —à—Ç.\n"
            text += "\n"

        await message.answer(text)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())